from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from services.chatgpt import ask_gpt
from keyboards.inline.quiz import quiz_topics_kb, quiz_answers_kb

router = Router()

class QuizState(StatesGroup):
    answering = State()

@router.callback_query(F.data == "quiz_open")
async def quiz_open(call: CallbackQuery, state: FSMContext):
    await state.clear()
    if call.message:
        await call.message.edit_text("üìö –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –∫–≤–∏–∑–∞:", reply_markup=quiz_topics_kb())

@router.callback_query(F.data.startswith("quiz_topic_"))
async def quiz_topic(call: CallbackQuery, state: FSMContext):
    topic = call.data.split("_", 2)[-1]
    await state.update_data(topic=topic)
    await state.set_state(QuizState.answering)
    question = await ask_gpt(f"–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ {topic} —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ (A,B,C,D).")
    if call.message:
        await call.message.edit_text(f"‚ùì {question}", reply_markup=quiz_answers_kb())

@router.callback_query(F.data.startswith("quiz_ans_"))
async def quiz_answer(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    topic = data.get("topic", "")
    user_ans = call.data.split("_", 2)[-1]
    result = await ask_gpt(f"–¢–µ–º–∞: {topic}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª {user_ans}. –í–µ—Ä–Ω–æ –ª–∏? –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ.")
    if call.message:
        await call.message.edit_text(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n\n–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ç–µ–º—É:", reply_markup=quiz_topics_kb())
