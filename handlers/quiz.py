import json
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from services.chatgpt import ask_gpt
from keyboards.inline.quiz import quiz_topics_kb, quiz_answers_kb, quiz_result_kb

router = Router()

class QuizState(StatesGroup):
    waiting_choice = State()

MAX_HISTORY = 5  # —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–º–Ω–∏—Ç—å


# ---------- –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ ----------
async def _generate_mc_question(topic: str, avoid: list[str]) -> dict | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
    {
      "question": "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",
      "options": {"A": "...", "B": "...", "C": "...", "D": "..."},
      "answer": "A" | "B" | "C" | "D"
    }
    """
    avoid_clause = ""
    if avoid:
        joined = "; ".join(avoid[-MAX_HISTORY:])
        avoid_clause = f"–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã: {joined}."

    prompt = (
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –û–î–ò–ù –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å-–≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ø–æ —Ç–µ–º–µ ¬´{topic}¬ª —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ (A‚ÄìD). "
        f"{avoid_clause}\n\n"
        "–í–µ—Ä–Ω–∏ –°–¢–†–û–ì–û –¢–û–õ–¨–ö–û JSON –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞:\n"
        "{{\n"
        '  "question": "‚Ä¶",\n'
        '  "options": {{"A": "‚Ä¶", "B": "‚Ä¶", "C": "‚Ä¶", "D": "‚Ä¶"}},\n'
        '  "answer": "A"\n'
        "}}\n"
        "- –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏.\n"
        "- –ù–µ –¥–æ–±–∞–≤–ª—è–π –ø–æ—è—Å–Ω–µ–Ω–∏–π/–ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ JSON."
    )

    raw = await ask_gpt(prompt, temperature=1.2)
    if not raw:
        return None

    try:
        start = raw.find("{")
        end = raw.rfind("}")
        if start == -1 or end == -1:
            return None
        data = json.loads(raw[start:end + 1])
    except Exception:
        return None

    if (
        isinstance(data, dict)
        and "question" in data
        and "options" in data
        and "answer" in data
        and isinstance(data["options"], dict)
        and all(k in data["options"] for k in ("A", "B", "C", "D"))
        and data["answer"] in ("A", "B", "C", "D")
    ):
        return data

    return None


# ---------- –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Ç–µ–º ----------
@router.callback_query(F.data == "quiz_open")
async def quiz_open(call: CallbackQuery, state: FSMContext):
    if call.message:
        await call.message.edit_text("üìù –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –∫–≤–∏–∑–∞:", reply_markup=quiz_topics_kb())


# ---------- –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ ----------
@router.callback_query(F.data.startswith("quiz_topic_"))
async def quiz_question(call: CallbackQuery, state: FSMContext):
    topic = call.data.split("quiz_topic_", 1)[1]

    data = await state.get_data()
    asked = data.get("asked_questions", [])

    qdata = await _generate_mc_question(topic, asked)
    if not qdata:
        if call.message:
            await call.message.edit_text(
                "ü§î –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–º–µ–Ω–∏ —Ç–µ–º—É.",
                reply_markup=quiz_topics_kb()
            )
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
    asked.append(qdata["question"])
    if len(asked) > MAX_HISTORY:
        asked = asked[-MAX_HISTORY:]

    await state.update_data(topic=topic, current_q=qdata, asked_questions=asked)
    await state.set_state(QuizState.waiting_choice)

    if call.message:
        text = (
            f"‚ùì {qdata['question']}\n\n"
            f"A) {qdata['options']['A']}\n"
            f"B) {qdata['options']['B']}\n"
            f"C) {qdata['options']['C']}\n"
            f"D) {qdata['options']['D']}"
        )
        await call.message.edit_text(text, reply_markup=quiz_answers_kb())


# ---------- –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª A/B/C/D ----------
@router.callback_query(F.data.startswith("quiz_ans_"))
async def quiz_check(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    qdata = data.get("current_q")
    topic = data.get("topic", "")

    if not qdata:
        if call.message:
            await call.message.edit_text("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∫–≤–∏–∑–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞. –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –∑–∞–Ω–æ–≤–æ:", reply_markup=quiz_topics_kb())
        await state.clear()
        return

    chosen = call.data.split("quiz_ans_", 1)[1]
    correct = qdata["answer"]

    score = int(data.get("score", 0))
    total = int(data.get("total", 0))
    total += 1

    chosen_text = qdata["options"][chosen]
    correct_text = qdata["options"][correct]

    if chosen == correct:
        score += 1
        verdict = f"‚úÖ –í–µ—Ä–Ω–æ!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}) {correct_text}"
    else:
        verdict = (
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n"
            f"–¢—ã –≤—ã–±—Ä–∞–ª {chosen}) {chosen_text}\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}) {correct_text}"
        )

    await state.update_data(score=score, total=total, current_q=None)

    if call.message:
        msg = (
            f"{verdict}\n\n"
            f"üìä –°—á—ë—Ç: {score}/{total}\n\n"
            f"–¢–µ–º–∞: {topic}"
        )
        await call.message.edit_text(msg, reply_markup=quiz_result_kb(topic))
