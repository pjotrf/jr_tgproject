from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from services.chatgpt import ask_gpt
from keyboards.inline.talk import talk_menu_kb, talk_chat_kb

router = Router()

class PersonaState(StatesGroup):
    chatting = State()

PERSONAS = {
    "einstein": "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ–Ω.",
    "pushkin": "–¢—ã –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü—É—à–∫–∏–Ω. –û—Ç–≤–µ—á–∞–π –ø–æ—ç—Ç–∏—á–Ω–æ –∏ –∏–∑—è—â–Ω–æ.",
    "jobs": "–¢—ã –°—Ç–∏–≤ –î–∂–æ–±—Å. –û—Ç–≤–µ—á–∞–π —Ä–µ–∑–∫–æ, —ë–º–∫–æ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ.",
}

@router.callback_query(F.data == "talk_open")
async def talk_open(call: CallbackQuery):
    if call.message:
        await call.message.edit_text("üë§ –í—ã–±–µ—Ä–∏ –ª–∏—á–Ω–æ—Å—Ç—å:", reply_markup=talk_menu_kb())

@router.callback_query(F.data.startswith("talk_set_"))
async def talk_set(call: CallbackQuery, state: FSMContext):
    key = call.data.split("_", 2)[-1]
    persona = PERSONAS.get(key)
    if not persona:
        if call.message:
            await call.message.edit_text("‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞. –í—ã–±–µ—Ä–∏ —Å–Ω–æ–≤–∞:", reply_markup=talk_menu_kb())
        return
    await state.update_data(persona=persona)
    await state.set_state(PersonaState.chatting)
    if call.message:
        await call.message.edit_text(
            "‚úÖ –ü–µ—Ä—Å–æ–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞. –ü–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –æ—Ç–≤–µ—á—É –≤ –µ—ë —Å—Ç–∏–ª–µ.",
            reply_markup=talk_chat_kb()
        )

@router.message(PersonaState.chatting)
async def talk_chat(msg: Message, state: FSMContext):
    data = await state.get_data()
    persona = data.get("persona", "")
    prompt = f"{persona}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg.text}"
    ans = await ask_gpt(prompt, temperature=1.0)
    await msg.answer(f"üë§ {ans}", reply_markup=talk_chat_kb())
