from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from services.chatgpt import ask_gpt

router = Router()

class PersonaState(StatesGroup):
    chatting = State()

PERSONAS = {
    "einstein": "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω.",
    "pushkin": "–¢—ã –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü—É—à–∫–∏–Ω, –ø–æ—ç—Ç.",
    "jobs": "–¢—ã –°—Ç–∏–≤ –î–∂–æ–±—Å, –æ—Ç–≤–µ—á–∞–π –∂—ë—Å—Ç–∫–æ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ."
}

def persona_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßë‚Äçüî¨ –≠–π–Ω—à—Ç–µ–π–Ω", callback_data="persona_einstein")],
        [InlineKeyboardButton(text="‚úí –ü—É—à–∫–∏–Ω", callback_data="persona_pushkin")],
        [InlineKeyboardButton(text="üçè –°—Ç–∏–≤ –î–∂–æ–±—Å", callback_data="persona_jobs")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="start")],
    ])

@router.callback_query(F.data == "talk")
async def talk_menu(callback: types.CallbackQuery):
    await callback.message.answer("üë§ –° –∫–µ–º –ø–æ–±–æ–ª—Ç–∞–µ–º?", reply_markup=persona_menu_kb())
    await callback.answer()

@router.callback_query(F.data.startswith("persona_"))
async def set_persona(callback: types.CallbackQuery, state: FSMContext):
    persona_key = callback.data.split("_", 1)[1]
    system_prompt = PERSONAS.get(persona_key)
    if not system_prompt:
        await callback.message.answer("‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.")
        await callback.answer()
        return

    await state.update_data(persona=system_prompt)
    await state.set_state(PersonaState.chatting)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="start")]
    ])
    await callback.message.answer(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {persona_key.capitalize()}\n‚úç –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø–µ—Ä—Å–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∏—Ç –≤ —Å–≤–æ—ë–º —Å—Ç–∏–ª–µ.",
        reply_markup=kb
    )
    await callback.answer()

@router.message(PersonaState.chatting)
async def persona_chat(message: types.Message, state: FSMContext):
    data = await state.get_data()
    persona = data.get("persona")
    if not persona:
        await state.clear()
        await message.answer("‚ö† –ü–µ—Ä—Å–æ–Ω–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞–∂–º–∏—Ç–µ ¬´üßë‚Äçüéì –î–∏–∞–ª–æ–≥ —Å –ª–∏—á–Ω–æ—Å—Ç—å—é¬ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω—É.")
        return

    prompt = f"{persona}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.text}"
    answer = await ask_gpt(prompt)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="start")]
    ])
    await message.answer(f"üë§ {answer}", reply_markup=kb)
