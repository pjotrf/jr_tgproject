from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from services.chatgpt import ask_gpt
from keyboards.inline.recs import recs_category_kb, recs_result_kb

router = Router()

class RecsState(StatesGroup):
    waiting_genre = State()
    recommending = State()

@router.callback_query(F.data == "recs_open")
async def recs_open(call: CallbackQuery, state: FSMContext):
    await state.clear()
    if call.message:
        await call.message.edit_text("üé¨ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=recs_category_kb())

@router.callback_query(F.data.startswith("recs_cat_"))
async def recs_cat(call: CallbackQuery, state: FSMContext):
    cat = call.data.split("_", 2)[-1]
    await state.update_data(cat=cat)
    await state.set_state(RecsState.waiting_genre)
    if call.message:
        await call.message.edit_text(f"‚úç –ù–∞–ø–∏—à–∏ –∂–∞–Ω—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {cat}")

@router.message(RecsState.waiting_genre)
async def recs_genre(msg: Message, state: FSMContext):
    data = await state.get_data()
    cat = data.get("cat", "—Ñ–∏–ª—å–º—ã")
    await state.set_state(RecsState.recommending)
    recs = await ask_gpt(f"–î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({cat}) –≤ –∂–∞–Ω—Ä–µ '{msg.text}'")
    await msg.answer(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{recs}", reply_markup=recs_result_kb())

@router.callback_query(F.data.in_(["recs_dislike", "recs_more"]))
async def recs_more_btn(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cat = data.get("cat", "—Ñ–∏–ª—å–º—ã")
    if call.message:
        recs = await ask_gpt(f"–î–∞–π –µ—â—ë —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({cat}), —É—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å")
        await call.message.edit_text(f"üéØ –ù–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{recs}", reply_markup=recs_result_kb())
