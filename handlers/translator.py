from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from services.chatgpt import ask_gpt

router = Router()

class TranslatorState(StatesGroup):
    translating = State()

LANGUAGES = {
    "en": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
    "de": "–Ω–µ–º–µ—Ü–∫–∏–π",
    "fr": "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
    "es": "–∏—Å–ø–∞–Ω—Å–∫–∏–π"
}

@router.callback_query(F.data == "translator")
async def translator_menu(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=f"lang_{code}") for code, name in LANGUAGES.items()]
    ])
    await callback.message.answer("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("lang_"))
async def set_language(callback: types.CallbackQuery, state: FSMContext):
    code = callback.data.split("_", 1)[1]
    lang = LANGUAGES.get(code, "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π")
    await state.update_data(lang=lang)
    await state.set_state(TranslatorState.translating)
    await callback.message.answer(f"‚úÖ –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞: {lang}. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
    await callback.answer()

@router.message(TranslatorState.translating)
async def translate_message(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data["lang"]
    text = message.text
    prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ {lang}: {text}"
    result = await ask_gpt(prompt)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="translator")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="start")]
    ])
    await message.answer(f"üî§ –ü–µ—Ä–µ–≤–æ–¥:\n{result}", reply_markup=keyboard)
